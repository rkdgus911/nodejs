。Node.js
Node.js는 V8이라는 구글에서 개발한 고성능 자바스크립트 엔진으로 빌드된 서버 가이드 개발용 소프트웨어 플랫폼입니다.
자바스크립트는 기본적으로 웹 브라우저(클라이언트)에서 실행되는데, Node.js 런타임 환경에서는 모든 종류의 서버 사이드 도구들을
제공하여 자바스크립트로 서버 개발을 할 수 있습니다.

- 백엔드 개발자가 사용하는 언어입니다.
- 서버에서 실행되는 자바스크립트입니다.
- Node.js는 웹서버프로그램(apache, iis, zeus등)과 같은 소프트웨어가 필요없이 웹서버 역할을 할 수 있는 내장 라이브러리가 있습니다.
- NPM이라는 패키지 관리자가 포함되어 있습니다. NPM은 Node.js의 프로그램을 설치하고 관리하는데 사용됩니다.
https://www.npmjs.com/ : 오픈소스 라이브러리

。Node.js 다운로드
https://nodejs.org/ : ko로 바꾸면 한국어로 바뀐다.
LTS다운

。Node.js 버전 확인
cmd창에서 node -v 명령어를 실행
예) v12.18.2

。npm 버전 확인
cmd창에서 npm -v 명령어를 실행
예) 6.14.5

。버전관리 프로젝트 생성
npm init
(기본값으로 설정하는 방법 npm init -y)

。외부모듈 설치
npm install 모듈이름

。FileSystem 모듈
파일처리와 관련된 모듈입니다. 메소드가 많고 node.js에서 가장 중요하고 기초가 되는 모듈입니다.

。메소드
readFile() : 파일을 비동기적으로 읽습니다.
readFileSync() : 파일을 동기적으로 읽습니다.
writeFile() : 파일을 비동기적으로 씁니다.
writeFileSync() : 파일을 동기적으로 씁니다.

*  동기와 비동기
프로그램이 동작하는 상태에서 완전히 해당 내용을 끝내고 다음으로 제어를 넘기는 방식을 동기,
동작이 끝나지 않은 상태에서도 제어권을 넘긴 후 프로그램을 계속 진행하면 비동기라고 합니다.

。예외 처리(Exception)
프로그램이 실행되고 있는 런타임시에 에러가 발생할 경우 처리할 수 있는 프로그램 구간을 의미합니다.

try{
	예외 상황이 발생할 수 있는 구간
	...
	...
}catch(e){
	예외 상황이 발생했을 경우 처리되는 구간
}finally{
	예외 상황이 발생 또는 발생하지 않아도 처리되는 구간(생략가능)
}

。이벤트 루프(Event Loop)
Node.js에서는 많은 이벤트를 빠르게 처리할 수 있습니다. Node.js 기반으로 만들어진 서버가 실행되면 변수들을 초기화하고
함수를 선언하고 이벤트가 발생할 때까지 기다립니다. 이벤트가 감지 되었을 때 해당 이벤트에 맞는 call back 함수를 호출합니다.

。events 모듈
이벤트 위주의 프로그램을 작성할 때 사용하는 모듈입니다.

。메소드
eventEmitter.on() : 지정한 이벤트의 리스너를 추가합니다.
eventEmitter.once() : 지정한 이벤트의 리스터를 추가하지만 한번 실행 이후 자동 제거됩니다.
eventEmitter.removelistener() : 지정한 이벤트에 대한 리스너를 제거합니다.
eventEmitter.emit() : 지정한 이벤트를 발생시킵니다.

。시스템 이벤트
process 모듈
process 모듈은 노드에서 항상 사용할 수 있는 객체입니다 (require 하지 않아도 됩니다.) on()과 emit(). 메소드는 객체를 생성하거나
모듈을 가져오지 않아도 바로 사용할 수 있습니다. on() 메소드를 호출하면서 이벤트 이름을 exit로 지정하면 내부적으로 프로세스가 끝날 떄를 알 수 있습니다.

。http 모듈
Node.js 에서 가장 기본적이고 중요한 서버 모듈입니다. HTTP 웹 서버를 생성하는 것과 관련된 모든 기능을 담당합니다.

。Server 객체
http 모듈의 createServer() 메소드를 실행하여 server 객체를 생성할 수 있습니다.

。메소드
listen() : 서버를 실행하고 클라이언트를 기다립니다.
close() : 서버를 종료합니다.

。이벤트
request : 클라이언트가 서버에 요청할 때 발생하는 이벤트입니다.
connection : 클라이언트가 접속할 때 발생하는 이벤트입니다.
close() : 서버가 종료될 때 발생하는 이벤트입니다.

。request 객체
클라이언트가 서버에게 전달하는 메세지(정보)를 담는 객체입니다.

속성
method : 클라이언트 요청 방식을 나타냅니다. (GET, POST)
url : 클라이언트가 요청한 URL을 나타냅니다.
		
			     pathname
			   <--------->
	http://www.naver.com/blog/index
	<---------------------------------->
		URL 정보

url.parse() : URL 형태를 분석합니다.
url.parse().pathname : pathname만 분리합니다.

headers : 요청 메세지 헤더를 나타냅니다. 

。response 객체
서버에서 클라이언트 응답 메세지를 전송시켜주는 객체입니다.

메소드
writeHeader() : 응답 헤더를 작성합니다.
write() : Body를 구성합니다.
end() : Body를 구성하고 전달합니다.

MIME형식
text/plain : 일반적인 text 파일
text/html : html 형식 파일
text/css : css 형식 파일
text/xml : xml 형식 파일
image/jpeg : jpeg 이미지
image/png : png 이미지
video/mpeg : mpeg 동영상 형식
audio/mp3 : mp3 음악 형식

파일을 수정한다하면 재컴파일을 해야하지만 npm install nodemon 하게 되면 실행을 할 때 nodemon node_11.js 하게되면

package.json
debug에 scripts부분

npx : 인스톨되지않았을 경우 설치를 하고나서 실행하라
nodemon : 재컴파일을 하지 않아도 반영된 코드를 바로바로 바꿔준다.
터미널에 npm start
html css support : 속성 자동완성
auto rename tag : 태크이름을 같이 바꿔줌
css peek : 어떻게 만들어졌는지 확인가능하게 해준다. 
eslint : 표준 자바스크립트 맞춤법 체크해준다.
ES7 React/Redux/GraphQL/React-Native snippets : 자동완성되고 철자를 확인할 수 있다.
indent-rainbow : 들여쓰기 구분 확인가능
Bracket Pair Colorizer : 괄호 명확하게 확인
Material Icon Theme : 아이콘 바뀜
StandardJS - JavaScript Standard Style : 자바스크립트 기본 코드에 도움을 주고 표현방법을 명확하게 문법들을 알려주는거










