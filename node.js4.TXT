。cookie-parser 모듈
요청된 쿠키를 쉽게 추출할 수 있도록 도와주는 모듈입니다. express(req, res)객체에
cookies 속성이 부여됩니다.

const express = require('express'); // 웹 서버를 가져다 쓰겠다.
const cookieParser = require('cookie-parser'); // 쿠키를 사용하기 위해
let app = express();

app.use(cookieParser());	// 일반 쿠키를 사용하려는 경우
app.use(cookieParser('암호화하기 위한 문자'));	// 암호화된 쿠키를 사용하려는 경우
ex) app.use(cookieParser('@#DSD@#DADSDC'));	// 아무 글자나 넣어주면 된다.

。쿠키 설정
res.cookie('키', '값', {
	쿠키 생성 옵션
});

* 쿠키 생성 옵션
maxAge : 만료시간을 밀리초 단위로 설정합니다.
expires : 만요 시간을 GMT 시간으로 설정합니다.
path : cookie의 경로를 설정합니다. 기본 설정은 "/"(루트)입니다.
signed : true를 사용하면 암호화할 수 있습니다. (원래 기본값은 false이다.)

。쿠키 조회
req.cookies.[cookie의 대한 키]

。암호화된 쿠키
req.signedCookies.[cookie키]

。쿠키 삭제
res.clearCookie('키', {path: '경로'})

。express-session 모듈
express 프레임워크에서 세션을 관리하기 위해 사용하는 미들웨어 모듈입니다.

app.use(session({세션모듈의 옵션}));

* 세션모듈의 옵션
secret : 쿠키를 임의로 변조하는 것을 방지하기 위한 값입니다. 이 값을 통하여 세션을
암호화하여 저장합니다.
resave : 세션을 언제나 저장할 지 정하는 값입니다. 이 값을 false로 하는 것을 권장하고 필요에 따라
true로 설정하기도 합니다.
saveUninitialized : 세션이 저장되기 전에 uninitialized 상태로 미리 만들어서 저장합니다.

。세션 초기 설정
sess = req.session; 해당 클라이언트에 세션을 가지고 있다.
sess.userid = 'apple';

。세션 변수 사용
console.log(sess.userid);

。세션 삭제
req.session.destroy(() => {
	세션 삭제시 처리할 문장;
});
* destroy() 메소드 안에서는 세션에 접근할 수 없습니다.



https://db-engines.com/en/ranking



Q. 
/login

아이디 : [ ]
비밀번호 : [ ]
     [로그인]

/loginOk
* 아이디 / 비밀번호 확인 : admin / 1111
* 아이디와 비밀번호가 맞을 경우
쿠키 생성
welcome.html
로그인 되었습니다. (쿠키가 있을 경우 : 쿠키 형식은 아이디만 저장)

* 아이디와 비밀번호가 틀릴 경우
fail.html
아이디 또는 비밀번호가 다릅니다.

Q.

- 회원가입
아이디, 비밀번호, 이름, 성별 ....
member.json에 담는다.

- 로그인
member.json에 아이디가 존재하는지 확인
(세션을 이용해서 메인 페이지를 작성)

- 로그아웃
메인페이지에서 로그아웃을 클릭하면 세션이 삭제되도록





